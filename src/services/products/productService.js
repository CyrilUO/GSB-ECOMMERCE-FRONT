import { authApi } from "@/services/api.js";

// R√©cup√©rer tous les produits
export const getProductsRequest = async () => {
    console.log("üîπ [getProductsRequest] Appel API lanc√© pour r√©cup√©rer tous les produits.");
    try {
        const response = await authApi.get("/products");
        console.log("‚úÖ [getProductsRequest] R√©ponse API :", response.data);
        return response;
    } catch (error) {
        console.error("‚ùå [getProductsRequest] Erreur :", error.response ? error.response.data : error.message);
        throw error;
    }
};

// Ajouter un produit
export const addProductRequest = async (product) => {
    console.log("üîπ [addProductRequest] Appel API lanc√© avec le produit :", product);
    try {
        const response = await authApi.post("/products", product);
        console.log("‚úÖ [addProductRequest] R√©ponse API :", response.data);
        return response;
    } catch (error) {
        console.error("‚ùå [addProductRequest] Erreur :", error.response ? error.response.data : error.message);
        throw error;
    }
};

// Mettre √† jour un produit par ID
export const updateProductRequest = async (id, product) => {
    console.log(`üîπ [updateProductRequest] Appel API lanc√© pour le produit ID: ${id} avec les donn√©es :`, product);
    try {
        const response = await authApi.put(`/products/${id}`, product);
        console.log("‚úÖ [updateProductRequest] R√©ponse API :", response.data);
        return response;
    } catch (error) {
        console.error("‚ùå [updateProductRequest] Erreur :", error.response ? error.response.data : error.message);
        throw error;
    }
};

// Supprimer un produit par ID
export const deleteProductRequest = async (id) => {
    console.log(`üîπ [deleteProductRequest] Appel API lanc√© pour supprimer le produit ID: ${id}`);
    try {
        const response = await authApi.delete(`/products/${id}`);
        console.log("‚úÖ [deleteProductRequest] R√©ponse API :", response.data);
        return response;
    } catch (error) {
        console.error("‚ùå [deleteProductRequest] Erreur :", error.response ? error.response.data : error.message);
        throw error;
    }
};

// R√©cup√©rer les stocks actuels des produits
export const getCurrentProductStockRq = async () => {
    console.log("üîπ [getCurrentProductStockRq] Appel API lanc√© pour r√©cup√©rer les stocks des produits.");
    try {
        const response = await authApi.get("/products/stocks");
        console.log("‚úÖ [getCurrentProductStockRq] R√©ponse API :", response.data);
        return response;
    } catch (error) {
        console.error("‚ùå [getCurrentProductStockRq] Erreur :", error.response ? error.response.data : error.message);
        throw error;
    }
};

// R√©cup√©rer un produit par ID
export const getProductByIdRequest = async (id) => {
    console.log(`üîπ [getProductByIdRequest] Appel API lanc√© pour r√©cup√©rer le produit ID: ${id}`);
    try {
        const response = await authApi.get(`/products/${id}`);
        console.log("‚úÖ [getProductByIdRequest] R√©ponse API :", response.data);
        return response;
    } catch (error) {
        console.error("‚ùå [getProductByIdRequest] Erreur :", error.response ? error.response.data : error.message);
        throw error;
    }
};
